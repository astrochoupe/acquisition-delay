package fr.walliang.astronomy.acquisitiondelay;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

/**
 * Reader of a CSV file generated by Tangra software.
 * 
 * Create a representation in memory of the file.
 */
public class TangraCsvFileReader implements FileReader {

	private final String filename;
	
	/**
	 * TangraCsvFileReader constructor.
	 * 
	 * @param filename The path to the file to read.
	 */
	public TangraCsvFileReader(String filename) {
		this.filename = filename;
	}

	@Override
	public List<ObjectInfomation> parseFile() {
		List<ObjectInfomation> objects = new ArrayList<>();
		
		// read CSV file (made with Tangra software) and put data in memory
		Path file = Paths.get(filename);

		System.out.println("Reading " + file.toAbsolutePath().toString());

		int lineNumber = 0;

		try {
			List<String> lines = Files.readAllLines(file);

			int numObjectForY = 0;
			for (String line : lines) {
				lineNumber++;
				// debug
				// System.out.println("Line " + lineNumber + " : " + line);

				String[] fields = line.split(",");
				// debug
				// List<String> fields2 = Arrays.asList(fields);
				// System.out.println(fields2);

				if (fields.length < 4) {
					System.err.println("Line " + lineNumber
							+ " cannot be parsed as comma separated values. There must be at least 4 comma separated fields. Skipping this line.");
					continue;
				}

				try {
					int frameNumber = Integer.parseInt(fields[0]);
				} catch (NumberFormatException e) {
					System.err.println("Line " + lineNumber + " column 1 is not an integer. Skipping this line.");
					continue;
				}
				
				// parse file to get Y coordinate of the object
				if(fields.length == 12 || fields.length == 13) {
					int y;
					
					if(fields.length == 12) {
						y = Integer.parseInt(fields[9]);
					} else {
						y = Integer.parseInt(fields[10]);
					}
					
					objects.add(new ObjectInfomation(y));
					numObjectForY++;
				}

				String time = fields[1];
				String[] timeSplit = time.split("\\.");
				if (timeSplit.length != 2) {
					System.err.println("Line " + lineNumber + " column 2"
							+ " cannot separate time in s and time in ms by a point. Skipping this line.");
					continue;
				}
				int timeInMs;
				try {
					timeInMs = Integer.valueOf(timeSplit[1].substring(0, 3));
				} catch (NumberFormatException e1) {
					System.err.println("Line " + lineNumber + " column 2"
							+ " cannot convert time in ms after the point to integer. Skipping this line.");
					continue;
				} catch (IndexOutOfBoundsException e2) {
					System.err.println("Line " + lineNumber + " column 2"
							+ " string after point is longer that 4 caracters. Skipping this line.");
					continue;
				}

				boolean skipLine = false;
				int numObject = 0;
				
				for (int col = 2; col < fields.length; col=col+2) {
					int signal;
					try {
						signal = convertDecimalStringToInt(fields[col]);
					} catch (NumberFormatException e) {
						System.err.println("Line " + lineNumber + " column " + col+1 + " is not a decimal. Skipping this line.");
						skipLine = true;
						break;
					}

					int background;
					try {
						background = convertDecimalStringToInt(fields[col+1]);
					} catch (NumberFormatException e) {
						System.err.println("Line " + lineNumber + " column " + col+2 + " is not a decimal. Skipping this line.");
						skipLine = true;
						break;
					}

					// reliability (case when y position is not found)
					if(objects.size() <= numObject) {
						objects.add(new ObjectInfomation(0));
					}
					ObjectInfomation object = objects.get(numObject);
					object.addMeasure(new MeasurePoint(timeInMs, signal, background));
					numObject++;
				}
				
				if(skipLine) {
					continue;
				}

			}
			System.out.println("Reading finished");
		} catch (IOException e) {
			System.err.println("Error reading file : " + e);
		}

		return objects;
	}
	
	private static int convertDecimalStringToInt(String decimalString) throws NumberFormatException {
		double doubleValue;
		doubleValue = Double.parseDouble(decimalString);
		return (int) doubleValue;
	}
	
}
